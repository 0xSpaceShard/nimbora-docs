"use strict";(self.webpackChunknimbora_yield_dex=self.webpackChunknimbora_yield_dex||[]).push([[261],{8803:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=n(4848),r=n(8453);const o={id:"l2-contracts",title:"L2 Contracts",sidebar_position:2},i="L2 Contracts",a={id:"contracts/guides/l2-contracts",title:"L2 Contracts",description:"L2 contracts for Yield Dex project.",source:"@site/docs/contracts/guides/02-L2-Contracts.md",sourceDirName:"contracts/guides",slug:"/contracts/guides/l2-contracts",permalink:"/docs/contracts/guides/l2-contracts",draft:!1,unlisted:!1,editUrl:"https://github.com/0xSpaceShard/nimbora_yields_l2/docs/contracts/guides/02-L2-Contracts.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"l2-contracts",title:"L2 Contracts",sidebar_position:2},sidebar:"contractsSidebar",previous:{title:"L1 Contracts",permalink:"/docs/contracts/guides/l1-contracts"},next:{title:"How to create new strategies",permalink:"/docs/contracts/guides/create_strategy"}},l={},c=[{value:"Compilation",id:"compilation",level:2},{value:"Test",id:"test",level:2},{value:"Install dependencies",id:"install-dependencies",level:2},{value:"Create a test account",id:"create-a-test-account",level:2},{value:"ENVs",id:"envs",level:2},{value:"Declare With Starkli",id:"declare-with-starkli",level:2},{value:"Singers and account creation",id:"singers-and-account-creation",level:3},{value:"Deployment flow",id:"deployment-flow",level:2},{value:"Declare With Script",id:"declare-with-script",level:2},{value:"Deploy and setup the contracts",id:"deploy-and-setup-the-contracts",level:2},{value:"Deploy Pooling manager and Factory",id:"deploy-pooling-manager-and-factory",level:3},{value:"Setup the Pooling manager",id:"setup-the-pooling-manager",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"l2-contracts",children:"L2 Contracts"}),"\n",(0,s.jsx)(t.p,{children:"L2 contracts for Yield Dex project."}),"\n",(0,s.jsx)(t.h2,{id:"compilation",children:"Compilation"}),"\n",(0,s.jsxs)(t.p,{children:["We are using Scarb to compile our contracts, you need to install it to be able to use it.\nFor that, you can follow the steps ",(0,s.jsx)(t.a,{href:"https://book.cairo-lang.org/ch01-01-installation.html",children:"here"}),".\nOnce Scarb is installed, you are able to compile the contracts.\nRun ",(0,s.jsx)(t.code,{children:"scarb build"}),", it will build Sierra code of this package which will be written to the ",(0,s.jsx)(t.code,{children:"target/dev"})," directory."]}),"\n",(0,s.jsx)(t.h2,{id:"test",children:"Test"}),"\n",(0,s.jsxs)(t.p,{children:["You can find our tests under ",(0,s.jsx)(t.code,{children:"src/tests"}),", these tests are written using snfoundry you can find more information ",(0,s.jsx)(t.a,{href:"https://foundry-rs.github.io/starknet-foundry/getting-started/installation.html",children:"here"}),".\nFollow the installation documentation to be able to run our tests.\nTo run the tests, just do ",(0,s.jsx)(t.code,{children:"snforge test"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"install-dependencies",children:"Install dependencies"}),"\n",(0,s.jsxs)(t.p,{children:["To install dependencies run the script ",(0,s.jsx)(t.code,{children:"./install.sh"})]}),"\n",(0,s.jsx)(t.h2,{id:"create-a-test-account",children:"Create a test account"}),"\n",(0,s.jsxs)(t.p,{children:["To create a test account run the script ",(0,s.jsx)(t.code,{children:"./account.sh"}),". Follow the instructions to deploy the account."]}),"\n",(0,s.jsx)(t.h2,{id:"envs",children:"ENVs"}),"\n",(0,s.jsx)(t.p,{children:"Update the ENVs inside the .env file"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-plaintext",children:"STARKNET_NETWORK= network goerli ot mainnet\nACCOUNT_ADDRESS= account address\nACCOUNT_PK= account provate key\n"})}),"\n",(0,s.jsx)(t.h2,{id:"declare-with-starkli",children:"Declare With Starkli"}),"\n",(0,s.jsxs)(t.p,{children:["For this, we used starkli, you need to install it to be able to declare and deploy the contracts.\nIf you need to install starkli go to: ",(0,s.jsx)(t.a,{href:"https://book.starkli.rs/installation",children:"https://book.starkli.rs/installation"}),"\nOnce starkli is installed, you will need to set some environment variables.\nThere is a file called .env.example that you should change to .evn (script does this for you).\nIf you want to declare on goerli change the ",(0,s.jsx)(t.code,{children:"STARKNET_NETWORK=goerli"})," (you can replace it to be ",(0,s.jsx)(t.code,{children:"STARKNET_NETWORK=mainnet"})," or ",(0,s.jsx)(t.code,{children:"STARKNET_NETWORK=sepolia"})," depending on the network you want to deploy to)."]}),"\n",(0,s.jsx)(t.h3,{id:"singers-and-account-creation",children:"Singers and account creation"}),"\n",(0,s.jsxs)(t.p,{children:["You will have to create a signers and account, just follow those ",(0,s.jsx)(t.a,{href:"https://book.starkli.rs/signers",children:"documentation"}),".\nBasically steps are as follows:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"starkli signer keystore new ./nimbora_keystore"})}),"\n",(0,s.jsx)(t.h2,{id:"deployment-flow",children:"Deployment flow"}),"\n",(0,s.jsxs)(t.p,{children:["Now that everything is set up, you are able to declare the contracts.\nFor that, we will use starkli declare command, for more info check the documentation ",(0,s.jsx)(t.a,{href:"https://book.starkli.rs/declaring-classes",children:"here"}),".\nRun ",(0,s.jsx)(t.code,{children:"starkli declare ./target/dev/CONTRACT_NAME.contract_class.json --account PATH/account-store --network NETWORK"}),".\n",(0,s.jsx)(t.code,{children:"CONTRACT_NAME "}),"the name of the json file that can be found inside ",(0,s.jsx)(t.code,{children:"./target/dev/ "}),"folder.\n",(0,s.jsx)(t.code,{children:"PATH/account-store"})," is the path to your account-store that has been previously created.\n",(0,s.jsx)(t.code,{children:"NETWORK "}),"the name of the network you want to declare to (goerli, sepolia or mainnet).\nAfter running that, it will return to you the declared contract class hash."]}),"\n",(0,s.jsx)(t.h2,{id:"declare-with-script",children:"Declare With Script"}),"\n",(0,s.jsxs)(t.p,{children:["Create a ",(0,s.jsx)(t.code,{children:".env"})," and add ",(0,s.jsx)(t.code,{children:"ACCOUNT_ADDRESS"})," and ",(0,s.jsx)(t.code,{children:"ACCOUNT_PK"}),".\nRun ",(0,s.jsx)(t.code,{children:"npm i"})," to install the package.\nThe script is deploying the contract on goerli if you want to deploy on another network then go inside ",(0,s.jsx)(t.code,{children:"scripts/declareContracts"})," and change ",(0,s.jsx)(t.code,{children:"const provider = new RpcProvider({ nodeUrl: constants.NetworkName.SN_MAIN });"})," with the correct network (ex: SN_GOERLI).\nTo run the script just do ",(0,s.jsx)(t.code,{children:"npx ts-node scripts/declareContracts.ts --contract CONTRACT_NAME."}),"\n",(0,s.jsx)(t.code,{children:"CONTRACT_NAME"})," must be replaced by :"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"PoolingManager"}),"\n",(0,s.jsx)(t.li,{children:"Factory"}),"\n",(0,s.jsx)(t.li,{children:"Token"}),"\n",(0,s.jsx)(t.li,{children:"TokenManager"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"deploy-and-setup-the-contracts",children:"Deploy and setup the contracts"}),"\n",(0,s.jsx)(t.h3,{id:"deploy-pooling-manager-and-factory",children:"Deploy Pooling manager and Factory"}),"\n",(0,s.jsxs)(t.p,{children:["To deploy the factory and the pooling manager run the script ",(0,s.jsx)(t.code,{children:"./deploy.sh"})]}),"\n",(0,s.jsx)(t.h3,{id:"setup-the-pooling-manager",children:"Setup the Pooling manager"}),"\n",(0,s.jsxs)(t.p,{children:["To deploy the factory and the pooling manager run the script ",(0,s.jsx)(t.code,{children:"./setupContracts.sh"}),"\nThis will setup the pooling manager and deploy an sDAI strategy."]}),"\n",(0,s.jsx)(t.p,{children:"Only the owner of the contract will be able to set up the contract.\nYou can do the setup through voyager or starkscan."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"PoolingManager:"}),"\nOnly Owner:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"set_fees_recipient: Address of the fees recipient."}),"\n",(0,s.jsx)(t.li,{children:"set_l1_pooling_manager: Address of the pooling manager on l1."}),"\n",(0,s.jsx)(t.li,{children:"set_factory: Address of the Factory contract previously deployed."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Only Role, the owner has the correct role, but you can also give permission to other accounts:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"register_underlying: Registers an underlying asset, its corresponding bridge contract and the corresponding address of the l1bridge"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Factory:"}),"\nOnly Owner:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"deploy_strategy"}),": Deploys a new strategy with specified parameters.\nParameters are:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"l1_strategy: The Ethereum address of the L1 strategy"}),"\n",(0,s.jsx)(t.li,{children:"underlying: The contract address of the underlying asset"}),"\n",(0,s.jsx)(t.li,{children:"token_name: The name for the new token"}),"\n",(0,s.jsx)(t.li,{children:"token_symbol: The symbol for the new token"}),"\n",(0,s.jsx)(t.li,{children:"performance_fees: The performance fees for the strategy"}),"\n",(0,s.jsx)(t.li,{children:"min_deposit: The minimum deposit limit"}),"\n",(0,s.jsx)(t.li,{children:"max_deposit: The maximum deposit limit"}),"\n",(0,s.jsx)(t.li,{children:"min_withdrawal: The minimum withdrawal limit"}),"\n",(0,s.jsx)(t.li,{children:"max_withdrawal: The maximum withdrawal limit"}),"\n",(0,s.jsx)(t.li,{children:"withdrawal_epoch_delay: The delay in epochs for withdrawals"}),"\n",(0,s.jsx)(t.li,{children:"dust_limit: The dust limit for the strategy\nDeploy_strategy will deploy a new contract called token_manager and return you the address. We are going to use this contract to deposit some tokens."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Go to the Token Manager contract address and call the deposit function, This function can be called by any user :"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"TokenManager:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"deposit"}),": Allows a user to deposit assets into the contract.\nParameters are:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"assets: The amount of assets to deposit."}),"\n",(0,s.jsx)(t.li,{children:"receiver: The address to receive the minted shares."}),"\n",(0,s.jsx)(t.li,{children:"referral: The referral address for the deposit.\nOnce users have deposited some assets, they can now request a withdrawal from the contract."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"request_withdrawal"}),": Allows a user to request a withdrawal from the contract\nParameter is:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"shares: The amount of shares to withdraw."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"\u200b"})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);